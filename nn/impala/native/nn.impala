extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn randomDouble(f64, f64) -> (f64);
}

fn range(mut b: u64, e: u64, body: fn(u64) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn iter( m: mat[f64], body: fn((u64, u64,  &mut f64)) -> ()) -> () {
    let mut row = 0 as u64;
    let rows = m(0);
    let cols = m(1);
    let arr = m(2);
    while row < rows {
        let mut col = 0 as u64;
        while col < cols {
            body((row, col, arr as &mut f64));
            col++;
        }
        row++;
    }
}


fn @(?e) range_filter( b: i32, e: i32, body: fn(i32) -> ()) -> (f64) {
    if b < e{
        body(b);
        range_filter(b + 1, e, body);
    }
    0.0
}


fn @(true) max(a: f64, b: f64) -> (f64){
    if a > b{
        a
    }else{
        b
    }
}

fn @(true) relu( x: f64 ) -> (f64){
    if(x>=0.0){
        x
    }else{
        0.1 * x
    }
}

fn @(true) softmax(input: mat[f64]) -> (mat[f64]){
  let mut sum = 0.0;
  let mut i = 0 as u64;

  let output = mat[f64](input(0), input(1));

  while(i < input(0)){
    let e = exp(input(i,0));
    sum += e;
    output(i,0) = e;
    i++;
  }

    //let e = exp(input)
    //e / sum(e)

    output / sum
}


fn print_matrix(m : mat[f64]) -> (){
    printLine("----");
    for row in range(0 as u64, m(0)){
        for col in range(0 as u64, m(1)){
            printDouble(m(row,col));
            printString(", ");
        }

        printLine("");
    }
    printLine("----");
}

fn randomInit(m : mat[f64], min: f64, max: f64) -> (){
    for cell in iter( m ){
        let (row, col, ptr) = cell;
        m(row, col) = randomDouble(min, max);
    }
}

fn runNnBenchmark(file: &[u8]) -> (){
    let size_x = 28;
    let size_y = 28;

    let first_weights =  mat[f64](size_x, size_y);
    let second_weights =  mat[f64](32, 10);

    for cell in iter( first_weights ){
        let (row, col, ptr) = cell;
        *ptr = randomDouble(-0.1, 0.1);
    }
}

fn f(input: f64, first_weights: &[f64]) -> (f64, f64){
     (first_weights(0) * input, input)
}

fn main() -> i32 {
    //let input : mat[f64] = mat[f64](28*28, 1);
    //let first_weights : mat[f64] = mat[f64](32, 28*28);
    //let second_weights : mat[f64] = mat[f64](10,32);

    let arr : &mut[f64] = ~[3: f64];

    //randomInit(first_weights, -0.1, 0.1);
    //randomInit(second_weights, -0.1, 0.1);
    //randomInit(input, 0.0, 1.0);

    //let out = f(input, first_weights);

    arr(0) = 9.1;
    arr(1) = 9.1;
    arr(2) = 9.1;

    let Df = rev_diff(f);
    let (y,pb) = Df(1.2, (3 as u64, arr));
    let gradients = pb(1.0);
    let x_d = gradients(0);
    let input_d = gradients(1);
    //let first_weights_d = gradients(1);
    //let second_weights_d = gradients(2);

    printDouble(x_d);
    printDouble(input_d(1)(0));

    //printDouble(out);

    //print_matrix(first_weights);
    //print_matrix(out);
/*
    input(0) = 2.0;
    input(1) = 3.0;
    input(2) = 4.0;
    weights(0) = 1.0;
    weights(1) = 2.0;
    weights(2) = 3.0;

    let label: i32 = 1;
    let diff = rev_diff(f);

    let Df = rev_diff(loss);
    let (y,pb) = Df(
                (first_weight_size as u64, first_weights),
                (second_weight_size as u64, second_weights),
                ((28*28) as u64, input), label);

    let gradients = pb(1.0);
    let (weights_d_size, weights_d) = gradients(0);
    let (weights_d_2_size, weights_d_2) = gradients(1);

    printString("weights 1");
    for i in range(0, weights_d_size as i32){
        printDouble(weights_d(i));
    }

    for i in range(0, weights_d_2_size as i32){
        printDouble(weights_d_2(i));
    }

    propagate(first_weights, second_weights, input, output);

    printString("prediction");

    for i in range(0, 10){
        printDouble(output(i));
    }*/

    0
}

fn @(true) cross_entropy(output: mat[f64], target: i32) -> (f64){
  -log(output(target, 0))
}

fn @(true) propagate(first_weights: mat[f64],
                 second_weights: mat[f64],
                 input: mat[f64]) -> mat[f64]{

    let hidden = first_weights * input;
    let output_fully = second_weights * hidden;


    //fully_connected(input, hidden, first_weights);
    //fully_connected(hidden, output_fully, second_weights,32, 10);
    //softmax(output_fully, output, 10);

    output_fully
}

fn loss(
    first_weights: mat[f64],
    second_weights: mat[f64],
    input: mat[f64],
    target: i32 ) -> (f64){

  let output = propagate(first_weights, second_weights, input);
  cross_entropy(output, target)
}




