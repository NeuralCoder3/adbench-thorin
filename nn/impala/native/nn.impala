extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn randomDouble(f64, f64) -> (f64);
}

fn rangeU64(mut b: u64, e: u64, body: fn(u64) -> ()) -> () {
    while b < e {
        body(b++)
    }
}



fn print_matrix(m : mat[f64]) -> (){
    printLine("----");
    for row in rangeU64(0 as u64, m(0)){
        for col in rangeU64(0 as u64, m(1)){
            printDouble(m(row,col));
            printString(", ");
        }

        printLine("");
    }
    printLine("----");
}

fn f(x: mat[f64], weights: mat[f64]) -> mat[f64] {
    weights * x
}

fn main() -> i32 {
    let input : mat[f64] = mat[f64](2,1);
    let weights : mat[f64] = mat[f64](2,2);

    let out = f(input, weights);

    print_matrix(out);
/*
    input(0) = 2.0;
    input(1) = 3.0;
    input(2) = 4.0;
    weights(0) = 1.0;
    weights(1) = 2.0;
    weights(2) = 3.0;

    let diff = rev_diff(f);

    let (fx, pb) = diff(input(0), 3.0);
    let gradients  = pb(1.0);
    let xd = gradients(0);
    printDouble(fx);
    printDouble(xd);*/
    0
}
