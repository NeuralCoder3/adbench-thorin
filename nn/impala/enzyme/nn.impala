extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn pow(f64, f64) -> (f64);
    fn sqrt(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn randomDouble(f64, f64) -> (f64);

    fn initMnist() -> ();
    fn readInput(i32) -> (&[f64]);
    fn readLabel(i32) -> (i32);
}

fn range(mut b: u64, e: u64, body: fn(u64) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn print_matrix(m : mat[2:f64]) -> (){
    printLine("----");
    for row in range(0 as u64, m.shape(0)){
        printString("|");
        for col in range(0 as u64, m.shape(1)){
            let value = m(row,col);
            if value >= 0.0{
                printString("");
            }
            printDouble(value);
        }

        printLine("|");
    }
    printLine("----");
}

fn iter( m: mat[2:f64], body: fn((u64, u64,  &mut f64)) -> ()) -> () {
    let mut row = 0 as u64;
    let rows = m.shape(0);
    let cols = m.shape(1);
    while row < rows {
        let mut col = 0 as u64;
        while col < cols {
            body((row, col, (&(m(row, col))) as &mut f64));
            col++;
        }
        row++;
    }
}

//(ptr, f64, ...)

fn matrix_init(x : mat[2:f64], offset: f64) -> (){
    let cols = x.shape(1);
    for cell in iter( x ){
        let (row, col, ptr) = cell;
        *ptr = (row * cols + col) as f64 + offset;
    }
}

fn matrix_init_random(x : mat[2:f64], min: f64, max: f64) -> (){
    let cols = x.shape(1);
    for cell in iter( x ){
        let (row, col, ptr) = cell;
        *ptr = randomDouble(min, max);
    }
}

fn @(true) softmax(input: mat[2:f64]) -> (mat[2:f64]){
  let e = input.map(exp);
  e / e.sum
}

fn relu( x: f64 ) -> (f64){
    if(x>=0.0){
        x
    }else{
        0.1 * x
    }
}

extern fn test(x: (f64, f64)) -> f64{
    0.0
}


fn predict(input: mat[2:f64], first_weights: mat[2:f64], second_weights: mat[2:f64]) -> mat[2:f64]{
    let first_layer = (first_weights * input).map(relu);
    let second_layer = (second_weights * first_layer).map(relu);
    let classification = softmax(second_layer);
    classification
}

fn loss(input: mat[2:f64], first_weights: mat[2:f64], second_weights: mat[2:f64], y: u64) -> f64{
    let classification = predict(input, first_weights, second_weights);
    -log(classification(0,y))
}

fn adamOptimizer( epoch: i32, size: i32, weights: mat[2:f64], J: mat[2:f64], lr: f64, beta1: f64, beta2: f64, m: mat[2:f64], v: mat[2:f64] ) -> (mat[2:f64], mat[2:f64], mat[2:f64]) {
  let beta1Pow = pow(beta1, epoch as f64);
  let beta2Pow = pow(beta2, epoch as f64);

  let new_m = beta1 * m + (1.0 - beta1) * J;
  let new_v = beta2 * v + (1.0 - beta2) * J * J;

  let mHat = new_m / ( 1.0 - beta1Pow );
  let vHat = new_v / ( 1.0 - beta2Pow );

  let offset = lr * mHat / ( vHat.map(sqrt) + 1e-8 );

  (offset, new_m, new_v)
}


