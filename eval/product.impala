extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn randomDouble(f64, f64) -> (f64);
    fn dgemm(a_rows: i32, a_cols: i32, b_rows: i32,
            a : &f64, b : &f64, c : &f64) -> ();


    fn exp(f64) -> (f64);
    fn lgamma(f64) -> (f64);
    fn log(f64) -> (f64);
    fn readInt() -> (i32);


    fn free(&u8) -> ();
    fn parseInt(&[u8]) -> (i32);

    fn start() -> ();
    fn end() -> ();


    //fn parallel(i32, fn(i32, i32) -> ()) -> ();
}

fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn simple(x: tn[2: f64], y: tn[2: f64]) -> tn[2: f64]{
    x * y
}

fn main(argc : i32, argv : &[&[u8]]) -> i32 {

    let size = 2;

    let mut helper = 0.0;
    let diff = rev_diff(simple);

    let a_arr = ~[size * size: f64];
    let b_arr = ~[size * size: f64];
    let s_arr = ~[size * size: f64];

    for i in range(0, size * size){
        a_arr(i) = i as f64;
        b_arr(i) = i as f64;
        s_arr(i) = 0.0;
    }
    s_arr(0) = 1.0;

    let a = tn.dense(a_arr, (size, size));
    let b = tn.dense(b_arr, (size, size));
    let s = tn.dense(s_arr, (size, size));

    let (fx,pb) = diff(a, b);
    let gradient = pb(s);

    let a_d = gradient(0);
    let b_d = gradient(1);

    printDouble(a_d(0,0));
    printDouble(b_d(0,0));
    printDouble(fx(0,0));
    0
}
