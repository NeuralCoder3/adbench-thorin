extern "C" {
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn sqrt(f64) -> (f64);
    fn sin(f64) -> (f64);
    fn cos(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn read_ba_size(
        file: &[u8],
        n: &mut i32,
        m: &mut i32,
        p: &mut i32
    ) -> ();
    fn read_ba_instance(
        file: &[u8],
        n: i32,
        m: i32,
        p: i32,
        cams: &mut[f64],
        X: &mut[f64],
        w: &mut[f64],
        obs: &mut[i32],
        feats: &mut[f64]
    ) -> ();
    fn compute_reproj_error_d(
        cams: &[f64],
        X: &[f64],
        w: f64,
        feat_x: f64,
        feat_y: f64,
        err: &mut[f64],
        J: &mut[f64],
    ) -> ();

    fn ba_objective(
        n: i32,
        m: i32,
        p: i32,
        cams: &[f64],
        X: &[f64],
        w: &[f64],
        obs: &[i32],
        feats: &[f64],
        reproj_err: &mut[f64],
        w_err: &mut[f64]) -> ();

    fn compute_zach_weight_error_d(
        w: f64,
        err: &mut f64,
        J: &mut f64
    ) -> ();
}

fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn preprocess_qs( d: i32, k: i32,
    icf : &[f64],
    sum_qs : &mut[f64],
    Qdiags : &mut[f64]) -> ()
{
    let icf_sz = d * (d + 1) / 2;

    for ik in range(0, k) {
        sum_qs(ik) = 0.0;

        for id in range(0, d) {
            let q = icf(ik * icf_sz + id);
            sum_qs(ik) = sum_qs(ik) + q;
            Qdiags(ik * d + id) = exp(q);
        }
    }
}

fn subtract( d: i32,
    x: &[f64],
    y: &[f64],
    out: &mut[f64]) -> ()
{
    for id in range(0, d) {
        out(id) = x(id) - y(id);
    }
}

fn Qtimesx( d: i32,
    Qdiag: &[f64],
    ltri: &[f64], // strictly lower triangular part
    x: &[f64],
    out: &mut[f64]) -> ()
{
    for id in range(0, d) {
        out(id) = Qdiag(id) * x(id);
    }

    let mut Lparamsidx = 0;

    for i in range(0, d) {
        for j in range(i + 1, d) {
            out(j) = out(j) + ltri(Lparamsidx) * x(i);
            Lparamsidx++;
        }
    }
}

fn sqnorm(d: i32, v : &[f64]) -> (f64){
    let mut sum = 0.0;
    for i in range(0, d) {
        sum += v(i) * v(i);
    }

    sum
}

fn arr_max(n: i32,x : &[f64] ) -> (f64)
{
    let mut m = x(0);
    for i in range(1, n) {
        if (m < x(i)){
            m = x(i);
        }
    }

    m
}



fn cross(
    a : &[f64],
    b : &[f64],
    out : &mut[f64]) -> ()
{
    out(0) = a(1) * b(2) - a(2) * b(1);
    out(1) = a(2) * b(0) - a(0) * b(2);
    out(2) = a(0) * b(1) - a(1) * b(0);
}


fn sqsum( n: i32, x : &[f64]) -> (f64)
{
    let mut res = 0.0;
    for i in range(0, n) {
        res = res + x(i) * x(i);
    }

    res
}


fn rodrigues_rotate_point(
    rot: &[f64],
    pt: &[f64],
    rotatedPt : &mut[f64]) -> ()
{
    let sqtheta = sqsum(3, rot);
    if (sqtheta != 0.0)
    {
        let w = ~[3:f64];
        let w_cross_pt = ~[3:f64];

        let theta = sqrt(sqtheta);
        let costheta = cos(theta);
        let sintheta = sin(theta);
        let theta_inverse = 1.0 / theta;

        for i in range(0, 3) {
            w(i) = rot(i) * theta_inverse;
        }

        cross(w, pt, w_cross_pt);

        let tmp = (w(0) * pt(0) + w(1) * pt(1) + w(2) * pt(2)) *
            (1.0 - costheta);

        for i in range(0, 3) {
            rotatedPt(i) = pt(i) * costheta + w_cross_pt(i) * sintheta + w(i) * tmp;
        }
    }
    else
    {
        let rot_cross_pt = ~[3:f64];
        cross(rot, pt, rot_cross_pt);

        for i in range(0, 3) {
            rotatedPt(i) = pt(i) + rot_cross_pt(i);
        }
    }
}


fn radial_distort(
    rad_params : &[f64],
    proj: &mut[f64]) -> ()
{
    let rsq = sqsum(2, proj);
    let L = 1.0 + rad_params(0) * rsq + rad_params(1) * rsq * rsq;
    proj(0) = proj(0) * L;
    proj(1) = proj(1) * L;
}


fn project(cam: &[f64], X: &[f64], proj: &mut[f64]) -> (){

    let C =  &cam(3) as &[f64];
    let Xo = ~[2:f64];
    let Xcam = ~[3:f64];

    Xo(0) = X(0) - C(0);
    Xo(1) = X(1) - C(1);
    Xo(2) = X(2) - C(2);
    
    rodrigues_rotate_point(&cam(1) as &[f64], Xo, Xcam);
    
    proj(0) = Xcam(0) / Xcam(2);
    proj(1) = Xcam(1) / Xcam(2);
    

    radial_distort(&cam(9) as &[f64], proj);

    proj(0) = proj(0) * cam(6) + cam(7);
    proj(1) = proj(1) * cam(6) + cam(8);
}



fn computeReprojError(cam: &[f64], X: &[f64], w: f64, feats: &[f64], err: &mut[f64]) -> (){
    let proj = ~[2:f64];
    project(cam, X, proj);

    err(0) = w * (proj(0) - feats(0));
    err(1) = w * (proj(1) - feats(1));
}



fn computeZachWeightError(w: f64, err: &mut f64) -> ()
{
    *err = 1.0 - w * w;
}


fn ba(n: i32, m: i32, p: i32, cams: &[f64], X: &[f64], w: &[f64], obs: &[i32], feats: &[f64], reproj_err: &[f64], w_err: &mut[f64]) -> (){

    for i in range(0, p)
    {
        let camIdx = obs(i * 2 + 0);
        let ptIdx = obs(i * 2 + 1);
        computeReprojError(
            &cams(camIdx * 11)  as &[f64],
            &X(ptIdx * 3)  as &[f64],
            w(i),
            &feats(i * 2) as &[f64],
            &reproj_err(2 * i) as &mut[f64]
        );
    }

    for i in range(0, p)
    {
        computeZachWeightError(w(i), &mut w_err(i));
    }
}

fn runGmmBenchmark(file: &[u8]) -> (){
    let mut n = 2;
    let mut m = 5;
    let mut p = 1000;

    read_ba_size(file, &mut n, &mut m, &mut p);

    let nCamParams = 11;

    let cams = ~[nCamParams * n:f64];
    let X = ~[3 * m:f64];
    let w = ~[p:f64];
    let obs = ~[2 * p:i32];
    let feats = ~[2 * p:f64];

    read_ba_instance(file, n, m, p, cams, X, w, obs, feats);

    printInteger(n);
    printInteger(m);
    printInteger(p);
    printDouble(cams(0));


    let reproj_err = ~[2 * p:f64];
    let w_err = ~[p:f64];

    ba(n, m, p, cams, X, w, obs, feats, reproj_err, w_err);

    printDouble(w_err(0));

    //ba_objective(n, m, p, cams, X, w, obs, feats, reproj_err, w_err);


    let J = ~[2 * (nCamParams + 3):f64];

    for i in range(0, p) {
        let camIdx = obs(2 * i);
        let ptIdx = obs(2 * i + 1);

        let currentCams =  &cams(nCamParams * camIdx) as &[f64];
        let currentX =  &X(nCamParams * camIdx) as &[f64];
        let currentW = w(i);
        let feat_x = feats(2 * i);
        let feat_y = feats(2 * i + 1);
        let current_reproj_err =  &reproj_err(2 * i) as &mut[f64];

        compute_reproj_error_d(currentCams, currentX, currentW, feat_x, feat_y, current_reproj_err, J );
    }


    for i in range(0, p) {
        let mut w_err = 0.0;
        let mut w_d = 0.0;
        compute_zach_weight_error_d(w(i), &mut w_err, &mut w_d);

        printDouble(w_err);
        printDouble(w_d);
    }

}

fn main() -> i32 {
    runGmmBenchmark("benchmark/ba/ba1_n49_m7776_p31843.txt");
    0
}

