extern "C" {
    fn exp(x:f64) -> (f64);
    fn log(x:f64) -> (f64);
    fn sqrt(x:f64) -> (f64);
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
}


fn test(x: f64) -> (f64){
    x
}

fn f(x: f64) -> f64 {
    test(x)
}

fn main() -> i32 {
    let input : &mut[f64] = ~[3:f64];
    let weights : &mut[f64] = ~[3:f64];
    input(0) = 1.1;

    input(0) = 2.0;
    input(1) = 3.0;
    input(2) = 4.0;
    weights(0) = 1.0;
    weights(1) = 2.0;
    weights(2) = 3.0;


    let diff = rev_diff(f);

    let (fx, pb) = diff(input(0), 3);
    let gradients  = pb(1.0);
    let (size, xd) = gradients(0);
    printDouble(fx);
    printDouble(xd(0));
    printDouble(xd(1));
    printDouble(xd(2));

    0
}


extern "C" {
    fn printDouble(f64) -> ();
    fn test(&[f64], &[f64], i32) -> (f64);
}

fn f(x: &[f64], y: &[f64], i : i32) -> f64{
    test(x, y, i)
}

fn main() -> i32 {
    let matrix1 : m64 = matrix64(2,2);


    let test =  (matrix1 * matrix1)(1,1);
    test as i32
}



extern "C" {
    fn exp(x:f64) -> (f64);
    fn log(x:f64) -> (f64);
    fn sqrt(x:f64) -> (f64);
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
}

fn f(x: f64, a: i32) -> f64 {
    x
}

fn main() -> i32 {

    let diff = rev_diff(f);

    let (fx, pb) = diff(1.1, 2);
    let gradients  = pb(1.0);
    let xd = gradients(0);
    printDouble(fx);
    printDouble(xd);

    0
}