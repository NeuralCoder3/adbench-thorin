extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn randomDouble(f64, f64) -> (f64);
    fn dgemm(a_rows: i32, a_cols: i32, b_rows: i32,
            a : &f64, b : &f64, c : &f64) -> ();


    fn exp(f64) -> (f64);
    fn lgamma(f64) -> (f64);
    fn log(f64) -> (f64);
    fn readInt() -> (i32);


    fn free(&u8) -> ();
    fn parseInt(&[u8]) -> (i32);

    fn start() -> ();
    fn end() -> ();


    //fn parallel(i32, fn(i32, i32) -> ()) -> ();
}

fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}


fn print_matrix(m : tn[2:f64]) -> (){
    printLine("----");
    for row in range(0, m.shape(0)){
        printString("|");
        for col in range(0, m.shape(1)){
            printDouble(m(row,col));
        }

        printLine("|");
    }
    printLine("----");
}
/*

fn print_vector(m : tn[1:f64]) -> (){
    printLine("----");
    for row in range(0, m.shape){
        printString("|");
        printDouble(m(row));

        printLine("|");
    }
    printLine("----");
}

fn iter( m: tn[2:f64], body: fn((i32, i32,  &mut i32)) -> ()) -> () {
    let mut row = 0 as u64;
    let rows = m.shape(0);
    let cols = m.shape(1);
    while row < rows {
        let mut col = 0 as u64;
        while col < cols {
            body((row, col, (&(m(row, col))) as &mut f64));
            col++;
        }
        row++;
    }
}

fn matrix_init(x : tn[2:f64], offset: f64) -> (){
    let cols = x.shape(1);
    for cell in iter( x ){
        let (row, col, ptr) = cell;
        *ptr = (row * cols + col) as f64 + offset;
    }
}

fn tensor_init(x : tn[3:f64], offset: f64) -> (){
    let size = x.shape(0);
    let rows = x.shape(1);
    let cols = x.shape(2);

    let mut c = 0;
    let mut i = 0;
    while i < size {
        let mut row = 0;
        while row < rows {
            let mut col = 0;
            while col < cols {
                x(i,row, col) = offset + (c++ as f64);
                col++;
            }
            row++;
        }
        i++;
    }
}

fn matrix_zero(x : tn[2:f64]) -> (){
    let cols = x.shape(1);
    for cell in iter( x ){
        let (row, col, ptr) = cell;
        *ptr = 0.0;
    }
}*/
/*
fn softmax(input: tn[2:f64]) -> (tn[2:f64]){
  let e = input.map(exp);
  e / e.sum
}

fn f(a : tn[2:f64], b : tn[2:f64]) -> f64{
   a.sum
}


fn relu( x: f64 ) -> (f64){
    if(x>=0.0){
        x
    }else{
        0.1 * x
    }
}


fn g(a : tn[1:f64], y: i32) -> tn[2:f64]{
   let c = tn.formula("-{i}, j -> {ij}",a, y);
    c
}



fn log_gamma_distrib( a: f64, p: i32, f: tn[1: f64] ) -> f64
{
    let PI : f64 = 3.14159265359;

    let sub_res = tn.formula("{} - {i} -> {i}", a, f);
    let lgamma_res = sub_res.map(lgamma);
    let sum = lgamma_res.sum;

    0.25 * ((p * (p - 1)) as f64) * log(PI) + sum

}*/

fn f(x : tn[2:f64], y : tn[2:f64]) -> tn[2:f64]{
   x * y
}

fn lol() -> (){
    printDouble(1.2);
}

fn test(x : tn[2:f64]) -> (){
    printDouble(x(0,0));
    lol();
    printInteger(x.shape(0));
    //printInteger(x.shape(1));
}

fn test2(x : tn[2:f64]) -> tn[2:f64]{
    x
}

fn sqr(x : f64) -> f64{
    x * x
}


fn simple(x: tn[2: f64], y: tn[2: f64]) -> tn[2: f64]{
    x * y
}

fn main(argc : i32, argv : &[&[u8]]) -> i32 {

    //let size = parseInt(argv(1));
    //printInteger(size);
    //printLine("s");

    let mut helper = 0.0;
    let diff = rev_diff(simple);

    for i in range(1, 40){
        let size = i * 50;

        let a_arr = ~[size * size: f64];
        let b_arr = ~[size * size: f64];
        let s_arr = ~[size * size: f64];

        for i in range(0, size * size){
            a_arr(i) = i as f64;
            b_arr(i) = i as f64;
            s_arr(i) = 0.0;
        }
        s_arr(0) = 1.0;

        let a = tn.dense(a_arr, (size, size));
        let b = tn.dense(b_arr, (size, size));
        let s = tn.dense(s_arr, (size, size));

        start();

        let (fx,pb) = diff(a, b);
        let gradient = pb(s);

        let a_d = gradient(0);
        let b_d = gradient(1);
        end();

        //print_matrix(a_d);
        //print_matrix(b_d);
        //print_matrix(fx);

        helper += a_d(0,0) +  b_d(0,0) +  fx(0,0);

        free(&fx(0,0) as &u8);
        free(&a_d(0,0) as &u8);
        free(&b_d(0,0) as &u8);


    }

    printDouble(helper);







    /*

    let arrS = ~[4: f64];
    arrS(0) = 1.0;
    arrS(1) = 0.0;
    arrS(2) = 0.0;
    arrS(3) = 0.0;
    let s = tn.dense(arrS, (2, 2));

    //let a = tn.const(1.1, (2, 2));
    //let b = tn.const(2.0, (2, 2));
    //let s = tn.const(1.0, (2, 2));

    let diff = rev_diff(simple);

    let (fx,pb) = diff(a, b);
    let gradient = pb(s);

    let a_d = gradient(0);
    let b_d = gradient(1);

    //printDouble(a_d(0,0));
    //printDouble(fx(0,0));


/*

    //let a = tn.const(4.2, (3, 4));
    //
    //let b = tn[f64](3, 4);
    //let d = tn[f64](3, 4);
    //let c = a + b;
    //test(a);
    //test(b);
    //test(c);

    //b(0,0) = 10.0;

    //let c = a + b;
    //let e = test2(a);
    //printDouble(simple(a)(0,0));
    //printDouble(simple(c)(0,0));



/*
    let a = tn[f64](1, 2);
    let b = tn[f64](2, 2);
    let s = tn[f64](2, 2);
    s(0,0) = 1.0;

    matrix_init(a, 1.0);
    matrix_init(b, 2.0);

    let diff = rev_diff(f);

    let (fx,pb) = diff(a, b);
    let gradient = pb(s);

    let a_d = gradient(0);
    let b_d = gradient(1);

    print_matrix(fx);
    print_matrix(a_d);
    print_matrix(b_d);


/*
    let a = tn[f64](2,2);
    let b = tn[f64](2);
    a(0, 0) = 10.0; a(0, 1) = 1.0;
    a(1, 0) = 9.0; a(1, 1) = 0.0;

    b(0) = 1.0;
    b(1) = 1.0;

    let diff = rev_diff(maxTest);

    let (fx,pb) = diff(a);
    let gradient = pb(b);

    let a_d = gradient;

    print_vector(fx);
    print_matrix(a_d);

    let a[i,j]

    let (c, indices) fetch(i), max(j) = a[i,j];

    let indices =
    let values =
    let values_d =


    let c[i,j] = if indices[i] == j { values_d[i] } else { 0.0 };


    select i,j from a[i,k], b[k,j] with i = 9 and sum(k)



/*

 let a = tn[f64](2,2);
    let b = tn[f64](2,2,2);

    let c = tn.const(2, 2.0);

    let d = a + c;

    print(d);


    /*

    let a = tn[f64](10);
    let b = tn[i32](10);

    for i in range(0, 10){
        a(i) = i as f64;
        b(i) = i as i32;
    }

    let c = a.choice(b, 10);

    print_matrix(c);




/*
    let diff = rev_diff(log_gamma_distrib);

    let p = 2;

    let factor = tn[f64](p);

    let mut j = 0;
    while j < p{
        factor(j) = 0.5 * (j as f64);
        j++;
    }

    let (fx,pb) = diff(3.0, p, factor);
    let gradient = pb(1.0);

    let a_d = gradient(0);
    let a_d2 = gradient(2);

    printDouble(fx);
    printDouble(a_d);
    print_vector(a_d2);



    //let b = tn[i32](2);

    //b(0) = 9;

    //printInteger(b(0));

    /*let exp_res = a.map(exp);
    let sum_res = tn.formula("{ij} -> {j}", exp_res);
    let log_res = sum_res.map(log);*/
    /*let dim = 4096;
    let a = tn[f64](2);
    a(0) = 1.0;
    a(1) = 2.0;

    let diff2 = tn.formula("{i} - {}-> {i}", a, 2.0);

    print_vector(diff2);*/

/*
    let s = tn[f64](3, 3);
    matrix_zero(s);
    s(0,0) = 1.0;
    s(1,1) = 1.0;
    s(2,2) = 1.0;


    matrix_init(a, 1.0);
    matrix_init(b, 2.0);

    print_matrix(a);
    print_matrix(b);


    let diff = rev_diff(g);

    let (fx,pb) = diff(v, 3);
    let gradient = pb(s);

    let a_d = gradient(0);
    let b_d = gradient(1);


    printInteger(fx.shape(0) as i32);
    printInteger(fx.shape(1) as i32);
    print_matrix(fx);
    print_vector(a_d);*/
/*
    let s = tn[f64](2, 2);
    matrix_zero(s);
    s(0,0) = 0.0;
    s(0,1) = 0.0;
    s(1,0) = 0.0;
    s(1,1) = 1.0;

    matrix_init(a, 1.0);
    matrix_init(b, 2.0);

    print_matrix(a);
    print_matrix(b);

    let diff = rev_diff(f);

    let mut i = 0;
    while i < 1{
        let (fx,pb) = diff(a, b);
        let gradient = pb(1.0);

        let a_d = gradient(0);
        let b_d = gradient(1);

        printLine("####################");
        printLine("a_d");
        print_matrix(a_d);
        printLine("b_d");
        print_matrix(b_d);
        printDouble(fx);
        //a = a - a_d;
        i++;
    }

    printLine("####################");
    print_matrix(a);*/
/*



    let (fx,pb) = diff(a, b);
    let gradient = pb(s);

    let a_d = gradient(0);
    let b_d = gradient(1);

    print_matrix(a_d);
    print_matrix(b_d);*/


    0
}
