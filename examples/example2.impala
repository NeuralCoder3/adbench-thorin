extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn randomDouble(f64, f64) -> (f64);
}


fn range(mut b: u64, e: u64, body: fn(u64) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn print_matrix(m : mat[2:f64]) -> (){
    printLine("----");
    for row in range(0 as u64, m.shape(0)){
        printString("|");
        for col in range(0 as u64, m.shape(1)){
            printDouble(m(row,col));
        }

        printLine("|");
    }
    printLine("----");
}

fn iter( m: mat[2:f64], body: fn((u64, u64,  &mut f64)) -> ()) -> () {
    let mut row = 0 as u64;
    let rows = m.shape(0);
    let cols = m.shape(1);
    while row < rows {
        let mut col = 0 as u64;
        while col < cols {
            body((row, col, (&(m(row, col))) as &mut f64));
            col++;
        }
        row++;
    }
}

//(ptr, f64, ...)

fn matrix_init(x : mat[2:f64], offset: f64) -> (){
    let cols = x.shape(1);
    for cell in iter( x ){
        let (row, col, ptr) = cell;
        *ptr = (row * cols + col) as f64 + offset;
    }
}

fn relu(x: f64) -> f64{
    if x > 0.0{
        x
    }else{
        0.1 * x
    }
}


fn g(x: mat[2:f64], y : mat[2:f64]) -> (mat[2:f64]){
    (x * y).map(relu)
}

fn main() -> i32 {

    let x = mat[f64](2, 2);
    let y = mat[f64](2, 2);

    let s = mat[f64](2, 2);

    matrix_init(x, -2.2);
    matrix_init(y, -2.2);

    print_matrix(x);
    print_matrix(y);

    s(0, 0) = 1.0;
    s(0, 1) = 0.0;
    s(1, 0) = 0.0;
    s(1, 1) = 0.0;

    print_matrix(s);

    let Df = rev_diff(g);
    let (fx,pb) = Df(x, y);
    let gradients = pb(s);
    let x_d = gradients(0);
    let y_d = gradients(1);

    print_matrix(fx);
    print_matrix(x_d);
    print_matrix(y_d);*/

    0
}
