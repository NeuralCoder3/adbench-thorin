extern "C" {
    fn exp(x:f64) -> (f64);
    fn log(x:f64) -> (f64);
    fn sqrt(x:f64) -> (f64);
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
}

fn @(true) layer(input: &[f64], output: &mut[f64], n: i32) -> (f64){
    output(0) = input(n);
    0.0
}


fn f(input: &[f64], weights_1: &[f64],  n: i32) -> f64 {
    input(0) * weights_1(0)
}

fn main() -> i32 {
    let input : &mut[f64] = ~[3:f64];
    let weights : &mut[f64] = ~[3:f64];
    let weights_2 : &mut[f64] = ~[3:f64];
    input(0) = 2.0;
    input(1) = 0.0;
    input(2) = 0.0;
    weights(0) = 1.0;
    weights(1) = 0.0;
    weights(2) = 0.0;
    weights_2(0) = 3.0;

    let diff = rev_diff(f);

    let (fx, pb) = diff((3 as u64, input), (3 as u64, weights),2);
    let gradients  = pb(1.0);
    let (size, xd) = gradients(0);
    let (size2, xd2) = gradients(1);
    printDouble(fx);
    printDouble(xd(0));
    printDouble(xd(1));
    printDouble(xd(2));
    printDouble(xd2(0));
    printDouble(xd2(1));
    printDouble(xd2(2));

    0
}
