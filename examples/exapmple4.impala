extern "C" {
    fn exp(x:f64) -> (f64);
    fn log(x:f64) -> (f64);
    fn sqrt(x:f64) -> (f64);
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
}

fn f(x: f64, a: i32) -> f64 {
    x
}

fn range(mut b: u64, e: u64, body: fn(u64) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn print_matrix(m : m64) -> (){
    printLine("----");
    for row in range(0 as u64, m(0)){
        for col in range(0 as u64, m(1)){
            printDouble(m(row,col));
            printString(", ");
        }

        printLine("");
    }
    printLine("----");
}

fn main() -> i32 {
    let test: m64 = matrix64(2, 2);
    let test2: m64 = matrix64(2, 2);
    let vector: m64 = matrix64(2, 1);

    vector(0, 0) = 1.0;
    vector(1, 0) = 2.0;

    //1.0, 2.0
    //3.0, 4.0
    test(0,0) = 1.0;
    test(0,1) = 2.0;
    test(1,0) = 3.0;
    test(1,1) = 4.0;
    print_matrix(test);

    //2.0, 3.0
    //4.0, 5.0
    test2(0,0) = 2.0;
    test2(0,1) = 3.0;
    test2(1,0) = 4.0;
    test2(1,1) = 5.0;

    print_matrix(test2);

    //1*2 + 2*4 = 10
    //10.0, 13.0
    //22.0, 29.0

    let vec_mul = test * vector;

    let mul = test * test2;
    let add = test + test2;
    let sub = test - test2;

    //get rows of matrix
    let rows = mul(0);

    //get rows of matrix
    let cols = mul(1);

    printInteger(rows as i32);
    printInteger(cols as i32);

    //get array of matrix
    let test3 : &mut[f64] = mul(2);

    print_matrix(vec_mul);
    print_matrix(mul);
    print_matrix(add);
    print_matrix(test * (1.0 / 8.0));
    0
}