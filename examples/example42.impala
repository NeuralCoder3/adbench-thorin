extern "C" {
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn malloc2(i64) -> &[u8];
}

fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn main(argc : i32, argv : &[&[u8]]) -> i32 {
    let a = ~[100: i32];
    let b = ~[100: i32];
    let c = ~[100: i32];

    let a_d = ~[100: i32] as &mut [i32];
    let b_d = ~[100: i32] as &mut [i32];
    let pb = ~[100: fn(i32) -> (&[i32], &[i32])];

    for i in range(0, 10){
        a(0) = i;
        b(0) = i + 1;
        c(0) = 0;
        a_d(0) = 0;
        b_d(0) = 0;
    }

    for i in range(0, 10){
        let ai = a(i);
        let bi = b(i);
        c(i) = ai * bi;

        let pb_a = |s : i32| -> (&[i32], &[i32]){
           a_d(i) += s;
           (a_d as &[i32], b_d as &[i32])

           // one hot vector at position i = s
           // (oneHot, zeroVector)
        };

        let pb_b = |s : i32| -> (&[i32], &[i32]){
           b_d(i) += s;
           (a_d as &[i32], b_d as &[i32])
        };

        let pb_mul = |s : i32| -> (&[i32], &[i32]){
           let res1 = pb_a(s * bi);
           let res2 = pb_b(s * ai);
           //let res3 = autodiff::add (res1, res2) -> for ptr select lhs ptr

           res1
        };

        let pb_i = |s : i32| -> (&[i32], &[i32]){
           pb_mul(s)
        };

        pb(i) = pb_i;
    }

    for i in range(0, 10){
        pb(i)(1);
    }

    for i in range(0, 10){
        printInteger(i);
    }

    0
}
