extern "C" {
    fn exp(x:f64) -> (f64);
    fn log(x:f64) -> (f64);
    fn sqrt(x:f64) -> (f64);
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
}

fn @(true) mul_ti(a: &[f64], b: &[f64]) -> (&[f64]){
    let out : &mut[f64] = ~[3: f64];
    out(0) = a(0) * b(0);
    out
}

fn relu(x: f64) -> f64{
    if x > 0.0 {
        x
    }else{
        0.1 * x
    }
}

fn main() -> i32 {
    let input : mat[f64] = mat[f64](28*28, 1);
    //let first_weights : mat[f64] = mat[f64](32, 28*28);
    //let second_weights : mat[f64] = mat[f64](10,32);

    //let a : &mut[f64] = ~[3: f64];
    //let b : &mut[f64] = ~[3: f64];

    //randomInit(first_weights, -0.1, 0.1);
    //randomInit(second_weights, -0.1, 0.1);
    //randomInit(input, 0.0, 1.0);

    //let out = f(input, first_weights);

    //a(0) = 1.3;
    //b(0) = 1.2;

    relu(input)

/*
    let Df = rev_diff(f);
    let (y,pb) = Df(input);
    let gradients = pb(1.0);
    let x = gradients(0);*/

    //printDouble(out);

    //print_matrix(first_weights);
    //print_matrix(out);
/*
    input(0) = 2.0;
    input(1) = 3.0;
    input(2) = 4.0;
    weights(0) = 1.0;
    weights(1) = 2.0;
    weights(2) = 3.0;

    let label: i32 = 1;
    let diff = rev_diff(f);

    let Df = rev_diff(loss);
    let (y,pb) = Df(
                (first_weight_size as u64, first_weights),
                (second_weight_size as u64, second_weights),
                ((28*28) as u64, input), label);

    let gradients = pb(1.0);
    let (weights_d_size, weights_d) = gradients(0);
    let (weights_d_2_size, weights_d_2) = gradients(1);

    printString("weights 1");
    for i in range(0, weights_d_size as i32){
        printDouble(weights_d(i));
    }

    for i in range(0, weights_d_2_size as i32){
        printDouble(weights_d_2(i));
    }

    propagate(first_weights, second_weights, input, output);

    printString("prediction");

    for i in range(0, 10){
        printDouble(output(i));
    }*/

    0
}