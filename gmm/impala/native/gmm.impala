extern "C" {
    fn printString(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn malloc(i64) -> (&mut[f64]);
    fn read_gmm_size(
        file: &[u8],
        d: &mut i32,
        k: &mut i32,
        n: &mut i32
    ) -> ();
    fn read_gmm(
        file: &[u8],
        d: &mut i32,
        k: &mut i32,
        n: &mut i32,
        wishartM: &mut i32,
        wishartGamma: &mut f64,
        alphas: &mut[f64],
        means: &mut[f64],
        icf: &mut[f64],
        x: &mut[f64],
    ) -> ();
}


fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn subtract( d: i32,
    x: &[f64],
    x_offset: i32,
    y: &[f64],
    y_offset: i32,
    out: &mut[f64]) -> (f32)
{
    let mut id = 0;
    while id < d {
        out(id) = x(id + x_offset) - y(id + y_offset);
        id++;
    }
    0f
}

fn Qtimesx( d: i32,
    Qdiag: &[f64],
    Qdiag_offset: i32,
    ltri: &[f64], // strictly lower triangular part
    ltri_offset: i32,
    x: &[f64],
    out: &mut[f64]) -> (f32)
{
    let mut id = 0;
    while id < d {
        out(id) = Qdiag(id + Qdiag_offset) * x(id);
        id++;
    }

    let mut Lparamsidx = 0;

    let mut i = 0;
    while i < d {
        let mut j = i + 1;
        while j < d {
            out(j) = out(j) + ltri(Lparamsidx + ltri_offset) * x(i);
            Lparamsidx++;
            j++;
        }
        i++;
    }

    out = Qdiag * x + ltri.strictlyLower * x


    0f
}

fn sqnorm(d: i32, v : &[f64], offset: i32) -> (f64){
    let mut sum = 0.0;
    let mut i = 0;
    while i < d{
        let val = v(i + offset);
        sum += val * val;
        i++;
    }

    sum
}

fn arr_max(n: i32,x : &[f64] ) -> f64
{
    let mut m = x(0);
    for i in range(1, n) {
        if (m < x(i)){
            m = x(i);
        }
    }

    m
}

fn logsumexp( x : mut[2: f64] ) -> f64
{
    let mx = x.max
    (x - mx).map(log) + mx
}

fn log_gamma_distrib( a: f64, p: i32 ) -> f64
{
    let PI : f64 = 3.14159265359;
    let mut out = 0.25 * ((p * (p - 1)) as f64) * log(PI);

    for j in range(1, p+1) {
        out += lgamma(a + 0.5 * ((1 - j) as f64));
    }

    out
}


fn log_wishart_prior( p: i32, k: i32,
    wishartM: i32,
    wishartGamma: f64,
    sum_qs: &[f64],
    Qdiags: &[f64],
    icf: &[f64]) -> f64
{

    let n = p + wishartM + 1;
    let icf_sz = p * (p + 1) / 2;

    let distrb_tuble = (0.5 * (n as f64), p);
    let C = (n as f64) * (p as f64) * (log(wishartGamma) - 0.5 * log(2.0)) - log_gamma_distrib([distrb_tuble,distrb_tuble]);

    let mut out = 0.0;

    let mut ik = 0;
    while ik < k {
        let p_offset = ik * p;
        let icf_offset = ik * icf_sz + p;

        let frobenius = sqnorm(p, Qdiags, p_offset) + sqnorm(icf_sz - p, icf, icf_offset);
        out += 0.5 * wishartGamma * wishartGamma * frobenius - (wishartM as f64) * sum_qs(ik);
        ik++;
    }

    out - (k as f64) * C
}



fn preprocess_qs( d: i32, k: i32,
    icf : &[f64],
    sum_qs : &mut[f64],
    Qdiags : &mut[f64]) -> ()
{
/*
    let icf_sz = d * (d + 1) / 2;

    let mut ik = 0;
    while ik < k {
        sum_qs(ik) = 0.0;

        let mut id = 0;
        while id < d {
            let q = icf(ik * icf_sz + id);
            sum_qs(ik) = sum_qs(ik) + q;
            Qdiags(ik * d + id) = exp(q);
            id++;
        }
        ik++;
    }*/

    let m = tn[f64](10);
    let res = m.ltri()

    let icf_sz = d * (d + 1) / 2;

    let mut ik = 0;
    while ik < k {
        sum_qs(ik) = 0.0;

        let mut id = 0;
        while id < d {
            let q = icf(ik * icf_sz + id);
            sum_qs(ik) = sum_qs(ik) + q;
            Qdiags(ik * d + id) = exp(q);
            id++;
        }
        ik++;
    }
}

fn gmm(d: i32, k: i32, n: i32,
        wishartGamma: f64,
        wishartM: i32,
        alphas : tn[2:f64],
        means : tn[2:f64],
        icf : tn[2:f64],
        x : tn[2:f64]) -> f64{

/*
    let PI : f64 = 3.14159265359;
    let CONSTANT = -(n as f64) * ( d as f64) * 0.5 * log(2.0 * PI);
    let icf_sz = d * (d + 1) / 2;

    let Qdiags = ~[d*k:f64];
    let sum_qs = ~[k:f64];
    let xcentered = ~[d:f64];
    let Qxcentered = ~[d:f64];
    let main_term = ~[k:f64];

    preprocess_qs(d, k, icf, sum_qs, Qdiags);

    let mut slse = 0.0;

    for ix in range(0, n) {
        let currentX : &[f64] =  &x(ix * d) as &[f64];
        for ik in range(0, k) {
            let currentQdiags =  &Qdiags(ik * d) as &[f64];
            let currentMeans =  &means(ik * d) as &[f64];
            let currentIfc =  &icf(ik * icf_sz + d) as &[f64];

            subtract(d, currentX, currentMeans, xcentered);
            Qtimesx(d, currentQdiags, currentIfc, xcentered, Qxcentered);
            main_term(ik) = alphas(ik) + sum_qs(ik) - 0.5 * sqnorm(d, Qxcentered);

            ij,jk->ik



            let res = tn.einsum("ij * jk->ik", a, b)
            let a_diff = tn.einsum("jk * ik -> ij", b, res_diff)
            let b_diff = tn.einsum("ij * ik -> jk", a, res_diff)



            let res = tn.einsum("ij + i -> ij", a, b)
            let a_diff = tn.einsum("ij -> ij", res_diff)
            let b_diff = tn.einsum("ij -> i", res_diff)

            let res = tn.einsum("ij / ji -> ij", a, b)
            let a_diff = tn.einsum("ij -> ij", res_diff)
            let b_diff = tn.einsum("ij -> ji", res_diff)

            i = 1
            j = 1 & 2
            k = 2





            i j k


            i = 1
            j = 1 & j = 2
            k = 2


            f = torch.einsum('ijk,mik->mij', a, b)


            let a_diff = tn.einsum("mik,mij->ijk", b, res_diff)
            let b_diff = tn.einsum("ijk,mij->mik", a, res_diff)


            for i
                for k
                    = 0

            i k j

            i = 1
            j = 1 & j = 2
            k = 2

            for i
                for k
                    for j
                        res[i,k] += a[i,j] * b[j,k]

        }
        slse += logsumexp(k, main_term);
    }

    let lse_alphas = logsumexp(k, alphas);

    *err = CONSTANT + slse - (n as f64) * lse_alphas + log_wishart_prior(d, k, wishartM, wishartGamma, sum_qs, Qdiags, icf);
    *err
*/







    Qdiags = torch.exp(icf[:, :d])
    sum_qs = torch.sum(icf[:, :d], 1)
    Ls = torch.stack([constructL(d, curr_icf) for curr_icf in icf])

    xcentered = torch.stack(tuple( x[i] - means for i in range(n) ))
    Lxcentered = Qtimesx(Qdiags, Ls, xcentered)
    sqsum_Lxcentered = torch.sum(Lxcentered ** 2, 2)
    inner_term = alphas + sum_qs - 0.5 * sqsum_Lxcentered
    lse = logsumexpvec(inner_term)
    slse = torch.sum(lse)

    CONSTANT = -n * d * 0.5 * math.log(2 * math.pi)
    return CONSTANT + slse - n * logsumexp(alphas) \
        + log_wishart_prior(d, wishart_gamma, wishart_m, sum_qs, Qdiags, icf)

    0.0
}

fn runGmmBenchmark(file: &[u8]) -> (){
    let mut d = 2;
    let mut k = 5;
    let mut n = 1000;

    let dp = &mut d;
    let kp = &mut k;
    let np = &mut n;

    read_gmm_size(file, dp, kp, np);

    let mut wishartM: i32 = 0;
    let mut wishartGamma: f64 = 1.0;

    let alphas_size = k as u64;
    let means_size = (d*k) as u64;
    let icf_size = (k * ( d * (d + 1) / 2 ))  as u64;
    let x_size = (d*n) as u64;

    let size = alphas_size + means_size + icf_size;

    let alphas = mat[f64](1, alphas_size);
    let means = mat[f64](1, means_size);
    let icf = mat[f64](1, icf_size);
    let x = mat[f64](1, x_size);

    let wishartMp = &mut wishartM;
    let wishartGammap = &mut wishartGamma;

    read_gmm(file, dp, kp, np, wishartMp, wishartGammap, &alphas(0,0) as &mut[f64], &means(0,0) as &mut[f64], &icf(0,0) as &mut[f64], &x(0,0) as &mut[f64]);

    let result = gmm(d, k, n, wishartGamma, wishartM, alphas, means, icf, x);
/*
    let diff = rev_diff(gmm);

    let (y,pb) = diff(d, k, n, wishartGamma, wishartM, alphas, means, icf, x);
    let gradients = pb(1.0);
    let alphas_d = gradients(5);
    let means_d = gradients(6);
    let icf_d = gradients(7);
*/

    printDouble(result);
}


fn main(argc: i32,argv :&[&[u8]]) -> i32 {
    if argc < 2{
        printString("No Benchmark specified");
    }else{
        let file = argv(1);
        printString(file);
        runGmmBenchmark(file);
    }

    0
}


