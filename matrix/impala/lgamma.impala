extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn randomDouble(f64, f64) -> (f64);

    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn lgamma(f64) -> (f64);
    fn max(f64, f64) -> (f64);

    fn atoi(&[u8]) -> (i32);
    fn begin() -> ();
    fn eval() -> ();
}

fn softmax(size: i32, input: &[f64], output: &mut[f64]) -> (){
    let mut sum = 0.0;
    for i in 0 .. size {
        let inp = exp(input(i));
        sum += inp;
        output(i) = inp;
    }

    for i in 0 .. size {
        output(i) /= sum;
    }
}

fn relu( x: f64 ) -> (f64){
    max(x, 0.1 * x)
}

fn mul(x: f64) -> (f64){
    lgamma(x)
}

fn init(size: i32, a : &mut [f64], offset : f64) -> (){
    for i in 0 .. size {
        a(i) = offset + i as f64;
    }
}

fn const(size: i32, a : &mut [f64], value : f64) -> (){
    for i in 0 .. size {
        a(i) = value;
    }
}

fn print(size: i32, a : &mut [f64]) -> (){
    for i in 0 .. size {
        printDouble(a(i));
        printString(",");
    }
    printString("\n");
}

fn main(argc: i32, argv: &[&[u8]]) -> i32 {

    let diff = rev_diff(mul);
    let (fx, backward) = diff(3.0);
    let result = backward(1.0);


    printDouble(fx);
    printDouble(result);

    0
}
