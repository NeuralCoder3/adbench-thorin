extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn randomDouble(f64, f64) -> (f64);

    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn lgamma(f64) -> (f64);
    fn max(f64, f64) -> (f64);

    fn atoi(&[u8]) -> (i32);
    fn begin() -> ();
    fn eval() -> ();
}

extern fn init(size: i32, a : &mut [f64], offset : f64) -> (){
    for i in 0 .. size {
        a(i) = offset + i as f64;
    }
}

extern fn const(size: i32, a : &mut [f64], value : f64) -> (){
    for i in 0 .. size {
        a(i) = value;
    }
}

extern fn print(size: i32, a : &mut [f64]) -> (){
    for i in 0 .. size {
        printDouble(a(i));
        printString(",");
    }
    printString("\n");
}

fn mul(n : i32, x: f64) -> (f64){
    let test = ~[n: f64];
    test(0) = x;
    test(0)
}

fn main(argc: i32, argv: &[&[u8]]) -> i32 {

    let size = 10;
    let x = ~[size: f64];
    let x_d = ~[size: f64];

    init(size, x, 1.0);
    const(size, x_d, 0.0);

    let diff = rev_diff(mul);
    let (fx, backward) = diff(size, 3.0);
    let result = backward(1.0);

    printDouble(fx);
    printDouble(result(1));
    printString("\n");
    print(size, x);
    print(size, x_d);

    0
}
