extern "C" {
    fn printString(&[u8]) -> ();
    fn printLine(&[u8]) -> ();
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn randomDouble(f64, f64) -> (f64);

    fn log(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn max(f64, f64) -> (f64);

    fn atoi(&[u8]) -> (i32);
    fn begin() -> ();
    fn eval() -> ();
}

fn softmax(size: i32, input: &[f64], output: &mut[f64]) -> (){
    let mut sum = 0.0;
    for i in 0 .. size {
        let inp = exp(input(i));
        sum += inp;
        output(i) = inp;
    }

    for i in 0 .. size {
        output(i) /= sum;
    }
}

/*
fn softmax(size: i32, input: &[f64], output: &mut[f64]) -> (){
    let mut sum = sum i in 0 .. size {
        let inp = exp(input(i));
        output(i) = inp;
        inp
    }

    for i in 0 .. size {
        output(i) /= sum;
    }
}

*/

fn relu( x: f64 ) -> (f64){
    max(x, 0.1 * x)
}

fn fully_connected_layer(input_size: i32, output_size: i32, input : &[f64], weights: &[f64], output: & mut[f64]) -> (){
    for i in 0 .. input_size {
        for j in 0 .. output_size {
            output(j) += relu(input(j) * weights(j + i * output_size));
        }
    }
}

fn mul(input_size: i32, hidden_size: i32, output_size: i32, input : &[f64], first_weights: &[f64], hidden_output: &mut [f64], second_weights: &[f64], output: & mut[f64]) -> (){
    fully_connected_layer(input_size, hidden_size, input, first_weights, hidden_output);
    fully_connected_layer(hidden_size, output_size, hidden_output, second_weights, output);
    softmax(output_size, output, output);
}

fn init(size: i32, a : &mut [f64], offset : f64) -> (){
    for i in 0 .. size {
        a(i) = offset + i as f64;
    }
}

fn const(size: i32, a : &mut [f64], value : f64) -> (){
    for i in 0 .. size {
        a(i) = value;
    }
}

fn print(size: i32, a : &mut [f64]) -> (){
    for i in 0 .. size {
        printDouble(a(i));
        printString(",");
    }
    printString("\n");
}

fn main(argc: i32, argv: &[&[u8]]) -> i32 {

    let input_size = atoi(argv(1));
    let hidden_size = atoi(argv(2));
    let output_size = atoi(argv(3));
    let first_weights_size = input_size * hidden_size;
    let second_weights_size = hidden_size * output_size;

    let input = ~[input_size: f64];
    let first_weights = ~[first_weights_size: f64];
    let second_weights = ~[second_weights_size: f64];
    let hidden_output = ~[hidden_size: f64];
    let output = ~[output_size: f64];

    let input_d = ~[input_size: f64];
    let first_weights_d = ~[first_weights_size: f64];
    let second_weights_d = ~[second_weights_size: f64];
    let hidden_output_d = ~[hidden_size: f64];
    let output_d = ~[output_size: f64];

    init(input_size, input, 1.0);
    init(first_weights_size, first_weights, -8.0);
    init(second_weights_size, second_weights, -8.0);
    const(output_size, output, 0.0);

    const(input_size, input_d, 0.0);
    const(first_weights_size, first_weights_d, 0.0);
    const(second_weights_size, second_weights_d, 0.0);
    const(output_size, output_d, 0.0);

    output_d(0) = 1.0;
    begin();
    let diff = rev_diff(mul);

    let backward = diff(input_size, hidden_size, output_size, input, first_weights, hidden_output, second_weights, output);
    let result = backward(input_d, first_weights_d, hidden_output_d, second_weights_d, output_d);

    eval();


    if argc >= 5 && atoi(argv(3)) == 1 {
        print(input_size, input);
        print(first_weights_size, first_weights);
        print(hidden_size, hidden_output);
        print(second_weights_size, second_weights);
        print(output_size, output);

        print(input_size, input_d);
        print(first_weights_size, first_weights_d);
        print(hidden_size, hidden_output_d);
        print(second_weights_size, second_weights_d);
        print(output_size, output_d);
    }

    0
}
