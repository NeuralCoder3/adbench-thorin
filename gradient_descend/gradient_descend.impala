extern "C" {
    fn printFloat(f32) -> ();
    fn printDouble(f64) -> ();
    fn printInteger(i32) -> ();
    fn log(f64) -> (f64);
    fn sqrt(f64) -> (f64);
    fn exp(f64) -> (f64);
    fn logf(f32) -> (f32);
    fn lgamma(f64) -> (f64);
    fn read_gmm_size(
        file: &[u8],
        d: &mut i32,
        k: &mut i32,
        n: &mut i32
    ) -> ();
    fn read_gmm(
        file: &[u8],
        d: &mut i32,
        k: &mut i32,
        n: &mut i32,
        wishartM: &i32,
        wishartGamma: &f64,
        alphas: &mut[f64],
        means: &mut[f64],
        icf: &mut[f64],
        x: &mut[f64],
    ) -> ();

    fn gmm_objective_d(
        d: i32,
        k: i32,
        n: i32,
        alphas: &[f64],
        means: &[f64],
        icf: &[f64],
        x: &[f64],
        wishartM: i32,
        wishartGamma: f64,
        err: &mut f64,
        J: &mut[f64],
    ) -> ();
}

fn range(mut b: i32, e: i32, body: fn(i32) -> ()) -> () {
    while b < e {
        body(b++)
    }
}

fn simpleOptimizer( epoch: i32, size: i32, weights: &mut[f64], J: &[f64] ) -> (){
    for index in range(0, size) {
        weights(index) -= J(index) * 0.000005;
    }
}

fn pow(value: f64, exponent: i32) -> f64{
    if exponent == 0{
        1.0
    }else if exponent % 2 == 0{
        let result = pow(value, exponent / 2 );
        result * result
    }else{
        value * pow( value, exponent - 1 )
    }
}

fn adamOptimizer(epoch: i32, size: i32, weights: &mut[f64], J: &[f64], lr: f64, beta1: f64, beta2: f64, m: &mut[f64], v: &mut[f64] ) -> (){
    let beta1Pow = pow(beta1, epoch);
    let beta2Pow = pow(beta2, epoch);

    for index in range(0, size) {
        m(index) = beta1 * m(index) + (1.0 - beta1) * J(index);
        v(index) = beta2 * v(index) + (1.0 - beta2) * J(index) * J(index);

        let mHat = m(index) / ( 1.0 - beta1Pow );
        let vHat = v(index) / ( 1.0 - beta2Pow );

        let offset = lr * mHat / ( sqrt( vHat ) + 10e-8 );

        weights(index) += offset;
    }
}

fn runGmmBenchmark(file: &[u8]) -> (){


    //######################### init values
    let mut d = 2;
    let mut k = 5;
    let mut n = 1000;

    let dp = &mut d;
    let kp = &mut k;
    let np = &mut n;

    read_gmm_size(file, dp, kp, np);

    printInteger(d);
    printInteger(k);
    printInteger(n);

    let alphas_size = k;
    let means_size = d*k;
    let icf_size = k * ( d * (d + 1) / 2 );

    let mut wishartM: i32 = 0;
    let mut wishartGamma: f64 = 1.0;

    let size = alphas_size + means_size + icf_size;

    let weights : &mut[f64] = ~[size:f64];

    let alphas : &mut [f64] =  weights;
    let means : &mut [f64] =  &weights(k) as &[f64];
    let icf : &mut [f64] =  &weights(k + d * k) as &[f64];

    let x : &mut[f64] = ~[n*d:f64];

    let wishartMp = &mut wishartM;
    let wishartGammap = &mut wishartGamma;


    //######################### readFile


    read_gmm(file, dp, kp, np, wishartMp, wishartGammap, alphas, means, icf, x);

    let mut err = 0.0;
    let J : &mut[f64] = ~[size:f64];


    //######################### optimizer init

    let beta1 = 0.9;
    let beta2 = 0.999;

    let lr = 0.001;

    let m = ~[size:f64];
    let v = ~[size:f64];

    //######################### train
    for epoch in range(1, 10000) {
        gmm_objective_d(d, k, n, alphas, means, icf, x, wishartM, wishartGamma, &mut err, J);

        printDouble(err);
        //simpleOptimizer(i, size, weights, J);
        adamOptimizer(epoch, size, weights, J, lr, beta1, beta2, m, v );
    }

    printDouble(err);
}


fn main() -> i32 {
    runGmmBenchmark("benchmark/gmm_d2_K5.txt");
    printInteger(1);
    1
}